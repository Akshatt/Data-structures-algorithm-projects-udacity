Task 0:-
Time Complexity: O(1)
Explanation: Both the print statements run in constant time and are independent of the input data as we only print the first and last rows of texts and calls respectively.
		algorithm:
			1. print the first row of texts		---- O(1)
`			2. print last row of calls		---- O(1)
		hence, total time complexity = O(1) + O(1) = O(1)
			worst case time complexity = O(1)
 
Task 1:-
Time Complexity: O(n)
Explanation: We create two sets from 2D lists texts and calls, both of which are dependent on input. The other statements take O(1) time. 
		Algorithm:
			1. Each set  has 2 for loops
			2. For j in texts 				---- O(n)
			3. for i in j[:2]				---- O(2)
			4.	set.add(i)				---- O(1)
			5. calculate length of union of both sets	---- O(1)
			6. print result 				---- O(1)
		Hence, the total time complexity =  O(n+2+1) * 2 + O(1) + O(1) = O(n)
			worst case time complexity = O(n)

Task 2:-
Time Complexity: O(n)
Explanation: We use a dictionary variable here. In the for loop we check if the iterable element is present in the keys of the dictionary. Hence the worst case time complexity is O(n*n).
		Algorithm:
			1. Create a dictionary dict 		---- O(1)		
			2.	for i in calls:			---- O(n)
			3. 		if i in dict.keys()	---- O(1)
			4. 			add to dict	---- O(1)
			5. 		else			---- O(1)
			6. 			add to dict	---- O(1)		
			7. 		if j in dict.keys() 	---- O(1)
			8. 			add to dict	---- O(1)
			9. 		else			---- O(1)
			10. 			add to dict	---- O(1)
			11. select key with maximum value 	---- O(n)
			12. print result 			---- O(1)
		hence total complexity = O(1) + O(n(1+1+1+1+1+1)) + O(n) + O(1)	= O(6n) + O(n) + O(1) 
			worst case time complexity = O(n)	
			
Task 3:-
Time Complexity:  O(n*logn)
Explanation: Algorithm: 
			1. create a list from a set using 2 for loops 	---- O(n+2+1+1)
			2. create an empty set 				---- O(1)
			3. for i in list 				---- O(n)
			4. 	if x==y					---- O(1)
			5. 		add to set 			---- O(1)
			6. 	elif x==z				---- O(1)
			7. 		add to set 			---- O(1)
			8. 	else 					---- O(1)
			9. 		add to set 			---- O(1)
			10. print statement 				---- O(1)
			11. for i in sorted(set)			---- O(nlogn + n) 	#nlogn is due to sorted()
			12. 	print element 				---- O(1)
			# part B
			13. var 1 					---- O(1)
			14. var 2 					---- O(1)
			15. for i in calls				---- O(n)
			16. 	if x==y 				---- O(1)
			17. 		increment var1			---- O(1)
			18. 	if x==z 				---- O(1)
			19. 		increment var2			---- O(1)
			20. print result				---- O(1)
		
		hence, total complexity = O(n+2+1+1) + O(1) + O(n+1+1+1+1+1+1) + O(1)+ O(nlogn + n + 1) + O(1) + O(1) + O(n+1+1+1+1) + O(1)
					= O(n) + O(n) + O(nlogn + n) + O(n) +O(1)
		worst case time complexity = O(nlogn) 

Task 4:
Time Complexity: O(n*logn)
Explanation: Algorithm - 
			1. create empty set for possible_tel 	                ---- O(1)
			2. create empty set for non_tel 	                    ---- O(1)
			3. for loop for calls 	                                ---- O(n+1+1)
			4. for loop for texts                                   ---- O(n+1+1)
			9. print statement 					                    ---- O(1)
			10. for i in sorted(possible_tel - non_tel)				---- O(nlogn + n)	# nlogn is due to sorted()
			11. 	print element					                ---- O(1)
		hence, total complexity = O(1) + O(1)+ O(n+1+1)+ O(n+1+1) + O(1) + O(nlogn + n) + O(1)
					= O(n)+ O(1) + O(nlogn) + O(1)
		worst case time complexity = O(nlogn)			 